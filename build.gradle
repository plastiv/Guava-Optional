apply plugin: 'base'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.0'
    }
}

configurations {
    injar
    libjar
    jarjar
}

String getClassesJar() {
    def javaHome = System.properties.'java.home'
    def candidates = ["$javaHome/lib/rt.jar", "$javaHome/bin/rt.jar", "$javaHome/../Classes/classes.jar"]
    def found

    candidates.find {
        if (new File(it).exists()) {
            found = it
            return true
        }
        return false;
    }

    if (!found) {
        throw new GradleException('unable to determine java runtime classes it is none of the expected: ' + candidates)
    }

    found
}

def guavaVersion = '18.0'
def classesJar = files(getClassesJar())
def proguardOutputFile = "build/libs/proguard_guava_${guavaVersion}.jar"
def jarjarOutputFile = "build/libs/jarjar_proguard_guava_${guavaVersion}.jar"

repositories {
    mavenCentral()
}

dependencies {
    injar "com.google.guava:guava:${guavaVersion}"
    libjar 'com.google.code.findbugs:jsr305:3.0.0'
    libjar classesJar
    jarjar "com.googlecode.jarjar:jarjar:1.3"
}

/**
 * Run proguard to shrink guava to only include the stuff we specify and its dependencies.
 */
task createCustomGuava(type: proguard.gradle.ProGuardTask) {
    injars configurations.injar.files
    libraryjars configurations.libjar.files
    outjars file(proguardOutputFile)
    configuration "proguard.pro"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.plastiv'
            artifactId 'guava-optional'
            version guavaVersion

            artifact source: jarjarOutputFile,
                    extension: 'jar',
                    builtBy: jarjarCustomGuava
        }
    }
}

task jarjarCustomGuava() {
    dependsOn createCustomGuava
    doLast {
        project.ant {
            taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.jarjar.asPath
            jarjar(jarfile: jarjarOutputFile) {
                zipfileset(src: proguardOutputFile)
                rule pattern: "com.google.common.**", result: "com.google.repacked.common.@1"
            }
        }
    }
}